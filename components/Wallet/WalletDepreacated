"use client";

// Highly flexible and powerful multi-wallet tool. Use any private key you would like. Data remains in browser storage and is never shared with a backend server.
// Manage up to an infinite number of separate wallets and private keys
// stored locally in your browser. No Metamask means no malicious scripts from other websites can highjack
// your funds
// Use your own custom rpc server

import {
  Wallet as Wállet,
  JsonRpcProvider,
  isAddress,
  isHexString,
} from "ethers";
// import { bridge } from "./bridge";
import { useWalletStore } from "@/hooks/store/walletStore";
import { useWalletHook } from "@/hooks/wallet";
import { useToast } from "@/hooks/use-toast";

import { z } from "zod";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form } from "@/components/ui/form";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

import BigNumber from "bignumber.js";

export enum Network {
  Mainnet = "Mainnet",
  Optimism = "Optimism",
  Arbitrum = "Arbitrum",
  Local = "Sepolia",
}

// Zod schemas for each form
const sendSchema = z.object({
  network: z.string().nonempty({ message: "field required" }),
  destination: z.string().nonempty("field required"),
  amount: z.string().nonempty("field required"),
});

// const bridgeSchema = z.object({
//   fromNetwork: z.string().nonempty("field required"),
//   toNetwork: z.string().nonempty("field required"),
//   amount: z.string().nonempty("field required"),
// });

const connectSchema = z.object({
  key: z.string().nonempty({ message: "private key required" }),
});

// const bridgeSchema = z.object({
//   fromNetwork: z.string().nonempty("field required"),
//   toNetwork: z.string().nonempty("field required"),
//   amount: z.string().nonempty("field required"),
// });

export function formatWei(quantity: bigint): string {
  const weiBN = new BigNumber(quantity.toString());
  const etherString = weiBN.dividedBy("1e18").toFixed(18);
  const [intPart, fracPart] = etherString.split(".");
  const intPart2 = intPart.padStart(5, "0");
  return `${intPart2}.${fracPart}`;
}

export default function Wallet() {
  const { balance, wallet, set_wallet, private_key } = useWalletStore();
  useWalletHook();

  const { toast } = useToast();

  // Create separate form instances with proper typing using z.infer
  const sendForm = useForm<z.infer<typeof sendSchema>>({
    resolver: zodResolver(sendSchema),
    defaultValues: {
      network: "",
      destination: "",
      amount: "",
    },
  });

  // const bridgeForm = useForm<z.infer<typeof bridgeSchema>>({
  //   resolver: zodResolver(bridgeSchema),
  //   defaultValues: {
  //     fromNetwork: "",
  //     toNetwork: "",
  //     amount: "",
  //   },
  // });

  const connectForm = useForm<z.infer<typeof connectSchema>>({
    resolver: zodResolver(connectSchema),
    defaultValues: {
      key: "",
    },
  });

  async function handleCreateNewWallet() {
    const newWallet: Wállet = new Wállet(Wállet.createRandom().privateKey);
    set_wallet(newWallet);
  }

  const onConnectSubmit = async (data: z.infer<typeof connectSchema>) => {
    try {
      if (isHexString(data.key)) {
        console.log("Connecting to private key:", data);
        console.log(data.key);
        const existing_wallet = new Wállet(data.key);
        set_wallet(existing_wallet);
        toast({
          title: "success",
          description: `client wallet set to private key: ${data.key}`,
        });
      } else {
        toast({
          title: "error",
          description: `not a valid key`,
          variant: "destructive",
        });
        return;
      }
    } catch (error) {
      toast({
        title: "error",
        description: `${error}`,
        variant: "destructive",
      });
      return;
    }
  };

  // const onBridgeSubmit = async (data: z.infer<typeof bridgeSchema>) => {
  //   if (data.fromNetwork == data.toNetwork) {
  //     toast({
  //       title: "invalid network input",
  //       description: "can't bridge to the same network",
  //       variant: "destructive",
  //     });
  //     return;
  //   }

  //   console.log("checkpoint, network inputs validated:", data);

  //   const amount = Number(data.amount);

  //   // let confirmation: boolean = false;

  //   try {
  //     await bridge(data.fromNetwork, data.toNetwork, amount, private_key!);

  //     toast({
  //       title: "Bridge success",
  //       description: "funds bridged",
  //     });
  //   } catch (error) {
  //     console.error(error);
  //   }
  // };

  // onSubmit handlers – replace these console.logs with your own logic
  const onSendSubmit = async (data: z.infer<typeof sendSchema>) => {
    console.log("Send Ethereum data:", data);
    // Add your send Ethereum logic here
    if (wallet && isAddress(data.destination)) {
      let provider;
      switch (data.network) {
        case "Main":
          provider = new JsonRpcProvider(process.env.NEXT_PUBLIC_MAINNET_URI!);
          break;
        case "Optimism":
          provider = new JsonRpcProvider(process.env.NEXT_PUBLIC_OPTIMISM_URI!);
          break;
        case "Arbitrum":
          provider = new JsonRpcProvider(process.env.NEXT_PUBLIC_ARBITRUM_URI!);
          break;
        case "Sepolia":
          provider = new JsonRpcProvider(process.env.NEXT_PUBLIC_SEPOLIA_URI!);
          break;
        default:
          console.log("error, network out of bounds");
          return;
      }

      const connected_wallet = new Wállet(private_key!, provider);

      try {
        const tx_response = await connected_wallet.sendTransaction({
          to: data.destination,
          value: data.amount,
        });
        const tx_hash = tx_response.hash;
        console.log(tx_hash);
        toast({
          title: "send success",
          description: `tx hash: ${tx_hash} | sent using the ${data.network} network`,
          duration: 30000,
        });
      } catch (error) {
        console.log(error);
        toast({
          title: "send error",
          description: `${error}`,
          variant: "destructive",
        });
      }
    } else {
      console.log("error, invalid form data");
      toast({
        title: "send error",
        description: "not an ethereum address",
        variant: "destructive",
      });
      return;
    }
  };

  return (
    <div className="flex text-xs text-green-400">
      {/* Wallet Actions Section */}
      <div className="fixed left-4 top-2 ">
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" className="text-xs">
              Wallet Interface
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-full max-w-2xl p-6 border-green-400 bg-black">
            <div className="space-y-8">
              {/* Wallet Management Section */}
              <div>
                <h3 className="font-semibold mb-4">Manage Wallet</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="flex flex-col gap-2">
                    <Label>Create New Wallet</Label>
                    <Button onClick={handleCreateNewWallet}>Create</Button>
                  </div>
                  <div className="flex flex-col gap-2">
                    <Label>Reveal Private Key</Label>
                    <Button
                      variant="outline"
                      onClick={() => {
                        toast({
                          title: "Private Key",
                          description: (
                            <div className="flex items-center justify-between w-full">
                              <span className="max-w-xs break-words whitespace-pre-wrap">
                                {private_key}
                              </span>
                              <Button
                                variant="ghost"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  navigator.clipboard.writeText(private_key!);
                                }}
                              >
                                Copy
                              </Button>
                            </div>
                          ),
                        });
                      }}
                    >
                      Reveal
                    </Button>
                  </div>
                  <div className="flex flex-col gap-2">
                    <Label>Previous Wallets</Label>
                    <Button
                      variant="outline"
                      onClick={() => {
                        // Get wallet data from local storage
                        const wallets = JSON.parse(
                          localStorage.getItem("wallet-store") || "{}",
                        );

                        // Create a Blob containing the HTML content
                        const htmlContent = `
                        <html>
                          <head>
                            <title>Stored Wallets</title>
                            <style>
                              body {
                                font-family: monospace;
                                padding: 20px;
                                background: #f5f5f5;
                              }
                              pre {
                                background: white;
                                padding: 15px;
                                border-radius: 4px;
                                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                              }
                              button {
                                margin: 10px 0;
                                padding: 8px 16px;
                                cursor: pointer;
                              }
                            </style>
                          </head>
                          <body>
                            <h2>Stored Wallets</h2>
                            <button onclick="location.reload()">Refresh</button>
                            <pre>${JSON.stringify(wallets, null, 2)}</pre>
                          </body>
                        </html>
                      `;

                        const blob = new Blob([htmlContent], {
                          type: "text/html",
                        });
                        const url = URL.createObjectURL(blob);

                        // Open in new tab
                        window.open(url, "_blank");

                        // Clean up the URL object after the tab is opened
                        setTimeout(() => URL.revokeObjectURL(url), 0);
                      }}
                    >
                      Show
                    </Button>
                  </div>
                  <div className="flex flex-col gap-2 md:col-span-3">
                    <Label>Use Another Wallet</Label>
                    <div className="flex gap-2">
                      <Input
                        placeholder="Enter private key"
                        {...connectForm.register("key")}
                      />
                      <Button
                        variant="outline"
                        type="submit"
                        onClick={connectForm.handleSubmit(onConnectSubmit)}
                      >
                        Submit
                      </Button>
                    </div>
                  </div>
                  {/* <div className="flex flex-col gap-2 md:col-span-3">
                    <Label>Use Custom RPC Node</Label>
                    <div className="flex gap-2">
                      <Input
                        placeholder="Enter RPC URI"
                        {...connectForm.register("key")}
                      />
                      <Button
                        variant="outline"
                        type="submit"
                        onClick={connectForm.handleSubmit(onConnectSubmit)}
                      >
                        Submit
                      </Button>
                    </div>
                  </div> */}
                </div>
              </div>
              {/* Send Ethereum Section */}
              <div className="border-t pt-6">
                <h3 className="font-semibold mb-4">Send Ethereum</h3>
                <Form {...sendForm}>
                  <form onSubmit={sendForm.handleSubmit(onSendSubmit)}>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {/* Network Select */}
                      <div className="flex flex-col gap-2">
                        <Label>Network</Label>
                        <Controller
                          name="network"
                          control={sendForm.control}
                          render={({ field }) => (
                            <Select
                              onValueChange={field.onChange}
                              value={field.value}
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="Select network" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectGroup>
                                  <SelectLabel>Networks</SelectLabel>
                                  <SelectItem value="Main">
                                    Mainnet(L1)
                                  </SelectItem>
                                  <SelectItem value="Optimism">
                                    Optimism(L2)
                                  </SelectItem>
                                  <SelectItem value="Arbitrum">
                                    Arbitrum(L2)
                                  </SelectItem>
                                  <SelectItem value="Sepolia">
                                    Sepolia(test)
                                  </SelectItem>
                                </SelectGroup>
                              </SelectContent>
                            </Select>
                          )}
                        />
                      </div>
                      {/* Destination Address */}
                      <div className="flex flex-col gap-2">
                        <Label>Destination Address</Label>
                        <Input
                          placeholder="Enter destination address"
                          {...sendForm.register("destination")}
                        />
                      </div>
                      {/* Amount */}
                      <div className="flex flex-col gap-2">
                        <Label>Amount in Wei</Label>
                        <Input
                          placeholder="Enter amount"
                          {...sendForm.register("amount")}
                        />
                      </div>
                      {/* Send Button */}
                      <div className="flex flex-col gap-2">
                        <Label>Send</Label>
                        <Button type="submit" variant="outline">
                          Send
                        </Button>
                      </div>
                    </div>
                  </form>
                </Form>
              </div>
              <div className="border-t pt-6">
                <h3 className="font-semibold mb-4">Bridge Networks</h3>
                <div>Coming soon, maybe like a week</div>
                {/*
              <Form {...bridgeForm}>
                <form onSubmit={bridgeForm.handleSubmit(onBridgeSubmit)}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="flex flex-col gap-2">
                      <Label>From Network</Label>
                      <Controller
                        name="fromNetwork"
                        control={bridgeForm.control}
                        render={({ field }) => (
                          <Select
                            onValueChange={field.onChange}
                            value={field.value}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Select network" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectGroup>
                                <SelectLabel>Networks</SelectLabel>
                                <SelectItem value={Network.Mainnet}>
                                  Mainnet(L1)
                                </SelectItem>
                                <SelectItem value={Network.Optimism}>
                                  Optimism(L2)
                                </SelectItem>
                                <SelectItem value={Network.Arbitrum}>
                                  Arbitrum(L2)
                                </SelectItem>
                              </SelectGroup>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                    <div className="flex flex-col gap-2">
                      <Label>To Network</Label>
                      <Controller
                        name="toNetwork"
                        control={bridgeForm.control}
                        render={({ field }) => (
                          <Select
                            onValueChange={field.onChange}
                            value={field.value}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Select network" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectGroup>
                                <SelectLabel>Networks</SelectLabel>
                                <SelectItem value={Network.Mainnet}>
                                  Mainnet(L1)
                                </SelectItem>
                                <SelectItem value={Network.Optimism}>
                                  Optimism(L2)
                                </SelectItem>
                                <SelectItem value={Network.Arbitrum}>
                                  Arbitrum(L2)
                                </SelectItem>
                              </SelectGroup>
                            </SelectContent>
                          </Select>
                        )}
                      />
                    </div>
                    <div className="flex flex-col gap-2">
                      <Label>Amount in Wei</Label>
                      <Input
                        placeholder="Enter amount"
                        {...bridgeForm.register("amount")}
                      />
                    </div>
                    <div className="flex flex-col gap-2">
                      <Label>Send</Label>
                      <Button type="submit" variant="outline">
                        Send
                      </Button>
                    </div>
                  </div>
                </form>
              </Form>
              */}
              </div>
            </div>
          </PopoverContent>
        </Popover>
      </div>
      <div className="fixed right-4 top-2">
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" className="text-xs">
              Wallet Balances
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-full max-w-2xl p-6 border-green-400 bg-black">
            {/* Remove this duplicate address line */}
            {/* <div className="text-xs">
              address s
              <span>{wallet ? wallet.address : "[no wallet detected]"}</span>
            </div> */}

            <div className="flex flex-col space-y-2 px-5">
              <div className="text-xs">
                address{" "}
                <span>{wallet ? wallet.address : "[no wallet detected]"}</span>
              </div>

              <div className="text-xs">
                main net balance{" "}
                {wallet ? (
                  <span>{formatWei(balance.Main.amount)}</span>
                ) : (
                  <>[no wallet detected]</>
                )}{" "}
                ETH
              </div>

              <div className="text-xs">
                optimism balance{" "}
                {wallet ? (
                  <span>{formatWei(balance.Optimism.amount)}</span>
                ) : (
                  <>[no wallet detected]</>
                )}{" "}
                ETH
              </div>

              <div className="text-xs">
                arbitrum balance{" "}
                {wallet ? (
                  <span>{formatWei(balance.Arbitrum.amount)}</span>
                ) : (
                  <>[no wallet detected]</>
                )}{" "}
                ETH
              </div>

              <div className="text-xs">
                sepolia balance{" "}
                {wallet ? (
                  <span>{formatWei(balance.Sepolia.amount)}</span>
                ) : (
                  <>[no wallet detected]</>
                )}{" "}
                ETH
              </div>
            </div>
          </PopoverContent>
        </Popover>
      </div>
    </div>
  );
}
